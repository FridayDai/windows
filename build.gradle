import org.apache.tools.ant.taskdefs.condition.Os

ext {
    // The drivers we want to use
    drivers = ["firefox", "chrome", "ie"]

    ext {
        groovyVersion = '2.4.1'
        gebVersion = '0.12.2'
        seleniumVersion = '2.48.2'
        chromeDriverVersion = '2.19'
        ieDriverVersion = '2.48.0'
    }
}

apply plugin: "groovy"
apply from: "gradle/idea.gradle"
apply from: "gradle/ci.gradle"
apply from: "gradle/osSpecificDownloads.gradle"

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile("org.spockframework:spock-core:1.0-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

    testCompile "com.gmongo:gmongo:1.5"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"

    // Drivers
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-ie-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-safari-driver:$seleniumVersion"

    // Selenium support
    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"

    // Gmail support
    compile 'com.google.api-client:google-api-client:1.20.0'
    compile 'com.google.oauth-client:google-oauth-client-jetty:1.20.0'
    compile 'com.google.apis:google-api-services-gmail:v1-rev29-1.20.0'

    //unirest support
    compile('com.mashape.unirest:unirest-java:1.4.7'){
        exclude module: 'httpclient'
    }
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("target/geb-reports/specs")
        }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildâ€¦
        systemProperty "env", System.getProperty("env", "develop")
    }
}

chromeTest {
    dependsOn unzipChromeDriver

    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

ieTest {
    dependsOn unzipIEDriver

    systemProperty "webdriver.ie.driver", new File(unzipIEDriver.outputs.files.singleFile, "IEDriverServer.exe").absolutePath
}

test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}
